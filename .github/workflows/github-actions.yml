# github repository Actions 페이지에 나타낼 이름
name: Java CI with Gradle

# event trigger
on:
  push:
    branches: [ "master" ]

permissions:
  contents: read

jobs:
  build-and-push-image:

    runs-on: ubuntu-latest

    steps:
      ## JDK Setting
      - uses: actions/checkout@v3
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'

      ## gradle caching
      - name: Gradle Caching
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      ## create application-dev.yml
      -
        name: make application-dev.properties
        if: contains(github.ref, 'master') # branch 가 master 일 때
        run: |
          cd ./src/main/resources
          touch ./application-dev.yml
          echo "${{ secrets.PROPERTIES_DEV }}" > ./application-dev.yml

        shell: bash

      ## create application-oauth.yml
      -
        name: make application-prod.yml
        if: contains(github.ref, 'master') # branch 가 master 일 때
        run: |
          cd ./src/main/resources
          touch ./application-oauth.yml
          echo "${{ secrets.PROPERTIES_OAUTH }}" > ./application-oauth.yml

        shell: bash

      ## gradle build
      -
        name: Build with Gradle
        run: ./gradlew build -x test

      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1 # buildx 설정

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push
        uses: docker/build-push-action@v2 # build-push-action 사용
        with:
          context: .
          push: true
          tags: user/app:latest
          cache-from: type=gha # 여기서 gha 는 Guthub Actions 용 캐시
          cache-to: type=gha,mode=max

  ## deploy to develop
  deploy:
    needs: build-and-push-image
    runs-on: ubuntu-latest
    name: Deploy to dev
    steps:
      - name: deploy
        uses: appleboy/ssh-action@master
        id: deploy-dev
        if: contains(github.ref, 'master')

        with:
          host: ${{ secrets.HOST_DEV }}
          username: ${{ secrets.USERNAME }}
          password: ${{ secrets.PASSWORD }}
          port: 22
          run: |
            sudo docker pull ${{ secrets.DOCKER_REPO }}
            docker run -p 8080:8080 ${{ secrets.DOCKER_REPO }}
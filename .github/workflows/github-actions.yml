# github repository Actions 페이지에 나타낼 이름
name: Java CI with Gradle

# event trigger
on:
  push:
    branches: [ "master" ]

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest

    steps:

      - name: Checkout
        uses: actions/checkout@v3   # 소스 가져오기

      ## JDK Setting
      - uses: actions/checkout@v3
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'

      ## create application-dev.yml
      - name: make application-dev.yml
        if: contains(github.ref, 'master')   # branch 가 master 일 때
        run: |
          cd ./src/main/resources
          touch ./application-dev.yml
          echo "${{ secrets.PROPERTIES_DEV }}" > ./application-dev.yml
        shell: bash

      ## create application-oauth.yml
      - name: make application-oauth.yml
        if: contains(github.ref, 'master')   # branch 가 master 일 때
        run: |
          cd ./src/main/resources
          touch ./application-oauth.yml
          echo "${{ secrets.PROPERTIES_OAUTH }}" > ./application-oauth.yml
        shell: bash

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      # Build
      - name: Build with Gradle
        run: ./gradlew clean build
          
      # 디렉토리 생성
      - name: Make Directory
        run: mkdir -p deploy

      # Jar 파일 복사
      - name: Copy Jar
        run: cp ./build/libs/*.jar ./deploy

      # 파일 압축
      - name: Make zip file
        run: zip -r ./springboot.zip ./deploy

      # Deploy
      - name: Deploy
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Upload to S3
        run: aws s3 cp --region ap-northeast-2 --acl private ./springboot.zip s3://springboot-with-githubaction-codedeploy/
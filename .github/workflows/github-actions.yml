# github repository Actions 페이지에 나타낼 이름
name: Java CI with Gradle

# event trigger
on:
  push:
    branches: [ "master" ]

permissions:
  contents: read

jobs:
  build-and-push-image:
    runs-on: ubuntu-latest

    steps:

      - name: Checkout
        uses: actions/checkout@v3   # 소스 가져오기

      ## JDK Setting
      - uses: actions/checkout@v3
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'

      ## create application-dev.yml
      - name: make application-dev.yml
        if: contains(github.ref, 'master')   # branch 가 master 일 때
        run: |
          cd ./src/main/resources
          touch ./application-dev.yml
          echo "${{ secrets.PROPERTIES_DEV }}" > ./application-dev.yml

        shell: bash

      ## create application-oauth.yml
      - name: make application-oauth.yml
        if: contains(github.ref, 'master')   # branch 가 master 일 때
        run: |
          cd ./src/main/resources
          touch ./application-oauth.yml
          echo "${{ secrets.PROPERTIES_OAUTH }}" > ./application-oauth.yml

        shell: bash

      ## gradle build
      - name: Build with Gradle
        run: ./gradlew build -x test

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2   # buildx 설정

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push
        uses: docker/build-push-action@v3   # build-push-action@v2 사용
        with:   # 동작에 대한 input 값 사용 선언
          context: .
          file: ./Dockerfile   # 빌드 시 사용할 Dockerfile 의 위치 지정
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPO }}:latest
          cache-from: type=gha   # gha 는 Guthub Actions 용 캐시
          cache-to: type=gha,mode=max

      ## Deploy
      - name: deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.PRIVATE_KEY }}
          port: ${{ secrets.PORT }}
          timeout: 50s
          script: |
            echo "테스트 출력"
            docker system prune -a -f
            docker pull ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPO }}
            docker run -p 8080:8080 ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPO }}